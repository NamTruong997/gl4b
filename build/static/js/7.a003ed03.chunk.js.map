{"version":3,"sources":["libs/utils/useIntersection.ts","libs/lazy-load/LazyImage.tsx","components/base/introduce/Introduce.tsx","store/actions/spinnerAction.ts","components/common/dropdown/Dropdown.tsx","utils/recaptcha/ReCaptchaV3.tsx","components/common/cusDialog/form-contact/FormContact.tsx","components/views/footerLink/contact/Contact.tsx"],"names":["useIntersection","ref","options","useState","entry","setEntry","once","root","rootMargin","threshold","useEffect","node","document","querySelector","current","window","IntersectionObserver","observer","entries","isIntersecting","disconnect","observe","inview","LazyImage","React","forwardRef","props","className","src","preview","loadType","load","onLoaded","onLoadProp","id","others","viewRef","useRef","lazyload","useLazyImage","loading","imgsrc","cloneElement","img","alt","style","transition","filter","transform","onLoad","imgSource","executing","setLoading","loaded","Image","onload","WOW","require","Introduce","live","init","renderHTML","data","useLocalize","dispatch","useDispatch","type","SpinnerAction","SHOW_SPINNER","setTimeout","HIDE_SPINNER","visual","ishomepage","mimeType","includes","url","loop","autoPlay","muted","logo","label","intro","data-wow-delay","quote","scrollable","scroll","DropDown","value","setValue","readOnly","onChange","e","currentTarget","val","selectedIndex","text","name","children","placeholder","__recaptcha_use_key","recaptcha3","execute","action","sitekey","a","grecaptcha","token","useReCaptcha3","useScripts","undefined","defer","async","FormContact","useForm","mode","register","handleSubmit","errors","formContact","formRef","createRef","onSubmit","dataSend","RECAPTCHA_SITEKEY","captcha","reset","axios","post","APP_API_URL","then","response","Swal","fire","popupMessages","success","title","body","catch","error","fail","fullname","errorMessage","nameRequired","inputText","required","email","emailRequired","emailInvalid","pattern","company","companyRequired","number","country","COUNTRIES","map","index","key","message","messageRequired","rows","textArea","htmlFor","gameloftTouPp","recaptchaTouPp","checkbox","confirmGameloftTouPpRequired","disabled","Object","keys","length","button","sendEmail","ContactPage","useLocalizePage","scrollTo","Helmet","charSet","content","rel","href"],"mappings":"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","file":"static/js/7.a003ed03.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"intersection-observer\";\r\n\r\ntype UseIntersectionProps = {\r\n  once?: boolean;\r\n};\r\ntype UseIntersectionType = IntersectionObserverInit & UseIntersectionProps;\r\n\r\nconst useIntersection = (ref: React.RefObject<HTMLElement> | string | null, options?: UseIntersectionType) => {\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n  const { once, root, rootMargin, threshold } = options || {};\r\n\r\n  useEffect(() => {\r\n    const node = typeof ref == \"string\" ? document.querySelector(ref) : ref?.current;\r\n    if (node && window.IntersectionObserver) {\r\n      const handleIntersection = (entries: IntersectionObserverEntry[]) => {\r\n        setEntry(entries[0]);\r\n        once && entries[0].isIntersecting && observer.disconnect();\r\n      };\r\n\r\n      const observer = new window.IntersectionObserver(handleIntersection, {\r\n        root: root,\r\n        rootMargin: rootMargin,\r\n        threshold: threshold,\r\n      });\r\n      observer.observe(node);\r\n\r\n      return () => observer.disconnect();\r\n    }\r\n  }, [ref, once, root, rootMargin, threshold]);\r\n\r\n  return { inview: entry?.isIntersecting ? true : false, entry };\r\n};\r\n\r\nexport default useIntersection;\r\n","import useIntersection from \"libs/utils/useIntersection\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { LazyType } from \"./LazyLoad\";\r\nimport \"./LazyLoad.scss\";\r\n\r\nexport interface LazyImageProps {\r\n  className?: string;\r\n  preview?: JSX.Element;\r\n  alt?: string;\r\n  src: string;\r\n  loadType?: LazyType;\r\n  load?: boolean;\r\n  id?: string;\r\n  onLoadProp?: () => void;\r\n  onLoaded?: () => void;\r\n}\r\nconst LazyImage = React.forwardRef<any, React.PropsWithChildren<LazyImageProps> & React.DOMAttributes<HTMLImageElement>>((props, ref) => {\r\n  let { className, preview, src, loadType, load, onLoaded, onLoadProp, id, ...others } = props;\r\n  loadType = loadType || \"inview\"; // default props\r\n\r\n  const viewRef = useRef<HTMLImageElement | null>(null);\r\n  const { inview } = useIntersection(loadType === \"inview\" ? viewRef : null, { once: true });\r\n\r\n  let lazyload = true;\r\n  if (loadType === \"inview\") lazyload = inview;\r\n  else if (loadType === \"manual\") lazyload = load || false;\r\n\r\n  const { loading, src: imgsrc } = useLazyImage(src, lazyload);\r\n\r\n  useEffect(() => {\r\n    if (!loading) onLoaded?.();\r\n  }, [loading, onLoaded]);\r\n\r\n  const styles = () => {\r\n    return {\r\n      transition: \"filter 0.5s linear\",\r\n      filter: `${loading ? \"blur(20px)\" : \"\"}`,\r\n      transform: `${loading ? \"scale(1)\" : \"\"}`,\r\n    };\r\n  };\r\n\r\n  return loading && props.preview ? (\r\n    React.cloneElement(props.preview, {\r\n      className: className,\r\n      ref: viewRef,\r\n    })\r\n  ) : (\r\n      <img\r\n        ref={(img) => {\r\n          viewRef.current = img;\r\n          ref && (typeof ref === \"function\" ? ref(img) : (ref.current = img));\r\n        }}\r\n        className={`lazy-image ${className || \"\"} lazy-image--${loading ? \"loading\" : \"loaded\"}`}\r\n        src={imgsrc}\r\n        alt={props.alt}\r\n        style={styles()}\r\n        id={id}\r\n        onLoad={onLoadProp}\r\n        {...others}\r\n      />\r\n    );\r\n});\r\n\r\nexport default LazyImage;\r\n\r\nconst useLazyImage = (imgSource: string, executing: boolean = true) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const loaded = useRef(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    loaded.current = false;\r\n  }, [imgSource]);\r\n\r\n  executing = executing && !loaded.current;\r\n  useEffect(() => {\r\n    if (executing) {\r\n      setLoading(true);\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        loaded.current = true;\r\n        setLoading(false);\r\n      };\r\n      img.src = imgSource;\r\n\r\n      return () => {\r\n        img.onload = null;\r\n      };\r\n    }\r\n  }, [imgSource, executing]);\r\n  const src = !executing && !loaded.current ? \"\" : imgSource;\r\n  return { src, loading };\r\n};\r\n\r\nexport { useLazyImage };\r\n\r\n","import LazyImage from \"libs/lazy-load/LazyImage\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useLocalize } from \"store/actions/localizeAction\";\r\nimport { hideLoading, showLoading } from \"store/actions/spinnerAction\";\r\nimport \"./Introduce.scss\";\r\nconst WOW = require(\"wowjs\");\r\n\r\nexport interface IntroduceDataType {\r\n  label: {\r\n    intro: string;\r\n    quote: string;\r\n    scroll: string;\r\n  };\r\n  visual: {\r\n    mimeType: string;\r\n    url: string;\r\n  };\r\n  logo: {\r\n    mimeType: string;\r\n    url: string;\r\n  };\r\n}\r\nexport interface IntroduceProps {\r\n  scrollable?: any;\r\n  ishomepage?: any;\r\n}\r\n\r\nconst Introduce: React.FC<IntroduceProps> = (props) => {\r\n  useEffect(() => {\r\n    const wow = new WOW.WOW({\r\n      live: false,\r\n    });\r\n    wow.init();\r\n  }, []);\r\n  const renderHTML = require(\"react-render-html\");\r\n  const data = useLocalize<IntroduceDataType>(\"intro\");\r\n  const dispatch = useDispatch();\r\n\r\n  const renderNotHomepage = () => {\r\n    if (data.visual.mimeType.includes(\"video\")) {\r\n      return <video src={data.visual.url} loop autoPlay={true} muted></video>;\r\n    } else {\r\n      return <LazyImage className=\"img-bg\" src={data.visual.url} alt=\"\" />;\r\n    }\r\n  };\r\n\r\n  const renderHomepage = () => {\r\n    if (data.visual.mimeType.includes(\"video\")) {\r\n      return <video src={data.visual.url} loop autoPlay={true} muted></video>;\r\n    } else {\r\n      return <div className=\"div-bg\" >\r\n        <LazyImage className=\"lazaImg-abs\" src={data.visual.url}></LazyImage>\r\n      </div>;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    dispatch(showLoading())\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      //Time for loading lazy transition\r\n      setTimeout(() => {\r\n        dispatch(hideLoading())\r\n      }, 500);\r\n    }\r\n\r\n\r\n  }, [dispatch, data])\r\n\r\n  return (\r\n    <section className=\"com-introduce \" id=\"introduce\" {...props}>\r\n      <div className=\"wrapper-video\">\r\n        {data?.visual && (props.ishomepage === \"true\" ? renderHomepage() : renderNotHomepage())}\r\n        {/* {props.ishomepage && data?.logo && <img className=\"logo\" src={data.logo.url} alt=\"logoIntro\" />} */}\r\n      </div>\r\n\r\n      <div className=\"wrapper-content\">\r\n        {props.ishomepage === \"true\" && data?.logo && <LazyImage src={data.logo.url} alt=\"logo\" />}\r\n\r\n        <div className={`${props.ishomepage === \"true\" ? \"\" : \"top\"} block-content`}>\r\n          <div className=\"first-content \">\r\n            <h2 className=\"title wow fadeInUp\">{data?.label.intro}</h2>\r\n            <div className=\"content wow fadeInUp\" data-wow-delay=\"0.2s\">\r\n              {data?.label.quote && renderHTML(data.label.quote)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {props.scrollable === \"true\" && (\r\n        <div className=\"block-scroll1\">\r\n          <div className=\"hr-scroll\"></div>\r\n          <div className=\"bounceScroll\">{data?.label.scroll}</div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Introduce;\r\n","import { IBaseAction } from \"store\";\r\nimport { SpinnerAction } from \"store/reducers/spinnerReducer\";\r\n\r\nexport interface SpinnerAction_Hide extends IBaseAction {\r\n  type: SpinnerAction.HIDE_SPINNER;\r\n}\r\n\r\nexport interface SpinnerAction_Show extends IBaseAction {\r\n    type: SpinnerAction.SHOW_SPINNER;\r\n}\r\nexport type SpinneActionType = SpinnerAction_Show | SpinnerAction_Hide;\r\n\r\nexport const showLoading = () => {\r\n  return {\r\n    type: SpinnerAction.SHOW_SPINNER\r\n  };\r\n};\r\n\r\nexport const hideLoading = () => {\r\n  return {\r\n    type: SpinnerAction.HIDE_SPINNER\r\n  };\r\n};\r\n","import \"./Dropdown.scss\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport interface DropdownProps {\r\n  name: string;\r\n  placeholder?: string;\r\n}\r\n\r\nconst DropDown = React.forwardRef<any, React.HTMLProps<DropdownProps>>((props, ref) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    if (e.currentTarget) {\r\n      let val = e.currentTarget.value;\r\n      if (val) {\r\n        setValue(e.currentTarget.options[e.currentTarget.selectedIndex].text);\r\n      } else {\r\n        setValue(\"\");\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className={`dropdown ${value ? \"active\" : \"\"}`}>\r\n      <input type=\"text\" value={value} readOnly />\r\n      <select onChange={e => onChange(e)} ref={ref} name={props.name}>\r\n        {props.children}\r\n      </select>\r\n      <span className=\"placeholder\">{props.placeholder}</span>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default DropDown;\r\n","import \"./ReCaptchaV3.scss\";\r\nimport useScripts from \"utils/script-loader\";\r\n\r\nlet __recaptcha_use_key = \"\";\r\n\r\nconst useReCaptcha3 = (sitekey: string) => {\r\n  __recaptcha_use_key = sitekey;\r\n  useScripts([\"https://www.google.com/recaptcha/api.js?render=\" + sitekey], undefined, undefined, { defer: true, async: false });\r\n\r\n  const execute = async (action: string) => {\r\n    if (window.grecaptcha) {\r\n      const token = await window.grecaptcha.execute(sitekey, { action });\r\n      return token;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return execute;\r\n};\r\n\r\nconst recaptcha3 = {\r\n  execute: async (action: string, sitekey?: string) => {\r\n    if (window.grecaptcha) {\r\n      if (!sitekey) sitekey = __recaptcha_use_key;\r\n      const token = await window.grecaptcha.execute(sitekey, { action });\r\n      return token;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { recaptcha3 };\r\n\r\nexport default useReCaptcha3;\r\n","import axios from \"axios\";\r\nimport { ButtonDataType } from \"components/base/strength/Strength\";\r\nimport DropDown from \"components/common/dropdown/Dropdown\";\r\nimport React, { createRef } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useLocalize } from \"store/actions/localizeAction\";\r\nimport Swal from \"sweetalert2\";\r\nimport { COUNTRIES, RECAPTCHA_SITEKEY } from \"utils\";\r\nimport { recaptcha3 } from \"utils/recaptcha/ReCaptchaV3\";\r\nimport \"./FormContact.scss\";\r\n\r\nexport interface FormContactProps {\r\n  showed?: boolean;\r\n  setShow?: Function;\r\n}\r\ntype FormData = {\r\n  name: string;\r\n  email: string;\r\n  country: string;\r\n  message: string;\r\n  company: string;\r\n  phone: string;\r\n  token: string;\r\n  checkbox: any;\r\n};\r\nexport interface FormContactDataType {\r\n  label: {\r\n    title: string;\r\n    intro: string;\r\n    fullname: string;\r\n    email: string;\r\n    company: string;\r\n    number: string;\r\n    country: string;\r\n    message: string;\r\n    gameloftTouPp: string;\r\n    recaptchaTouPp: string;\r\n  };\r\n  inputText: {\r\n    [key: string]: {\r\n      placeholder: string;\r\n    };\r\n  };\r\n  textArea: {\r\n    [key: string]: {\r\n      placeholder: string;\r\n    };\r\n  };\r\n  button: ButtonDataType;\r\n  errorMessage: {\r\n    [key: string]: string;\r\n  };\r\n  popupMessages: {\r\n    [key: string]: {\r\n      title: string;\r\n      body: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst FormContact: React.FC<FormContactProps> = (props) => {\r\n  const { register, handleSubmit, errors } = useForm<FormData>({\r\n    mode: \"onBlur\",\r\n  });\r\n  const data: FormContactDataType = useLocalize<any>(\"intro\")?.formContact;\r\n  const renderHTML = require(\"react-render-html\");\r\n  const formRef = createRef<HTMLFormElement>();\r\n\r\n  const onSubmit = async (dataSend: FormData) => {\r\n    const captcha = await recaptcha3.execute(RECAPTCHA_SITEKEY, \"ContactForm\");\r\n    dataSend = { ...dataSend, token: captcha };\r\n    formRef.current?.reset();\r\n    // props.setShow(false);\r\n\r\n    axios\r\n      .post(`${window.APP_API_URL}/api/user/contact`, dataSend)\r\n      .then(function (response) {\r\n        setTimeout(() => {\r\n          Swal.fire(\r\n            data?.popupMessages.success.title,\r\n            data?.popupMessages.success.body,\r\n            \"success\"\r\n          );\r\n        }, 500);\r\n      })\r\n      .catch(function (error) {\r\n        setTimeout(() => {\r\n          Swal.fire(\r\n            data?.popupMessages.fail.title,\r\n            data?.popupMessages.fail.body,\r\n            \"error\"\r\n          );\r\n        }, 500);\r\n      });\r\n  };\r\n\r\n  const isValid = () => Object.keys(errors).length !== 0;\r\n\r\n  return (\r\n    <section className={`com-form-contact animated faster visible`}>\r\n      <h2 className=\"title\">{data?.label.title}</h2>\r\n      <h4>{data?.label.intro}</h4>\r\n      <form ref={formRef} onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"item\">\r\n          <span className=\"label\">{data?.label.fullname}</span>\r\n          {errors.name && (\r\n            <span className=\"error animated fadeIn faster\">\r\n              {data?.errorMessage.nameRequired}\r\n            </span>\r\n          )}\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder={data?.inputText.fullname.placeholder}\r\n            ref={register({ required: true })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"item\">\r\n          <span className=\"label\">{data?.label.email}</span>\r\n          {errors.email && errors.email.type === \"required\" && (\r\n            <span className=\"error animated fadeIn faster\">\r\n              {data?.errorMessage.emailRequired}\r\n            </span>\r\n          )}\r\n          {errors.email && errors.email.type === \"pattern\" && (\r\n            <span className=\"error animated fadeIn faster\">\r\n              {data?.errorMessage.emailInvalid}\r\n            </span>\r\n          )}\r\n          <input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            placeholder={data?.inputText.email.placeholder}\r\n            ref={register({\r\n              required: true,\r\n              pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n            })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"item\">\r\n          <span className=\"label\">{data?.label.company}</span>\r\n          {errors.company && (\r\n            <span className=\"error animated fadeIn faster\">\r\n              {data?.errorMessage.companyRequired}\r\n            </span>\r\n          )}\r\n          <input\r\n            type=\"text\"\r\n            name=\"company\"\r\n            placeholder={data?.inputText.company.placeholder}\r\n            ref={register({ required: true })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"item\">\r\n          <span className=\"label\">{data?.label.number}</span>\r\n          <input\r\n            type=\"number\"\r\n            name=\"phone\"\r\n            placeholder={data?.inputText.number.placeholder}\r\n            ref={register()}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"item\">\r\n          <span className=\"label\">{data?.label.country}</span>\r\n          <DropDown\r\n            placeholder=\"France\"\r\n            name=\"country\"\r\n            ref={register({ required: true })}\r\n          >\r\n            {COUNTRIES.map((country, index) => {\r\n              return (\r\n                <option key={country.value} value={country.value}>\r\n                  {renderHTML(country.name)}\r\n                </option>\r\n              );\r\n            })}\r\n          </DropDown>\r\n        </div>\r\n\r\n        <div className=\"item mess\">\r\n          <span className=\"label\">{data?.label.message}</span>\r\n          {errors.message && (\r\n            <span className=\"error animated fadeIn faster\">\r\n              {data?.errorMessage.messageRequired}\r\n            </span>\r\n          )}\r\n          <textarea\r\n            rows={4}\r\n            name=\"message\"\r\n            placeholder={data?.textArea.message.placeholder}\r\n            ref={register({ required: true })}\r\n          />\r\n        </div>\r\n        {/* Checkbox */}\r\n        <div className=\"item checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"checkbox\"\r\n            name=\"checkbox\"\r\n            ref={register({ required: true })}\r\n          />\r\n          <label htmlFor=\"checkbox\">\r\n            {data?.label.gameloftTouPp && renderHTML(data.label.gameloftTouPp)}\r\n          </label>\r\n          <div className=\"recaptcha mg-top0\">\r\n            {data?.label.recaptchaTouPp &&\r\n              renderHTML(data.label.recaptchaTouPp)}\r\n          </div>\r\n          {errors.checkbox && (\r\n            <div className=\"errCheck animated fadeIn faster\">\r\n              {\" \"}\r\n              {data?.errorMessage.confirmGameloftTouPpRequired}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <button className=\"btn-submit\" disabled={isValid()}>\r\n          {data?.button.sendEmail.text}\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default FormContact;\r\n","// import AddIcon from \"@material-ui/icons/Add\";\r\n// import AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\n// import RemoveIcon from \"@material-ui/icons/Remove\";\r\n// import RoomOutlinedIcon from \"@material-ui/icons/RoomOutlined\";\r\n// import { styled } from \"@material-ui/styles\";\r\nimport Introduce from \"components/base/introduce/Introduce\";\r\nimport FormContact from \"components/common/cusDialog/form-contact/FormContact\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useLocalizePage } from \"store/actions/localizeAction\";\r\nimport \"./Contact.scss\";\r\nimport useReCaptcha3 from \"utils/recaptcha/ReCaptchaV3\";\r\nimport { RECAPTCHA_SITEKEY } from \"utils\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\n// const Map = styled(RoomOutlinedIcon)({\r\n//   color: \"#ff3050\",\r\n// });\r\n// const Add = styled(AddCircleIcon)({\r\n//   color: \"#ff3050\",\r\n// });\r\n\r\nexport interface ContactRegionDataType {\r\n  id: number;\r\n  ation: string;\r\n  city: string;\r\n  address: string;\r\n  email: string;\r\n  region_id: string;\r\n  nation: string;\r\n  ordinal: string;\r\n}\r\ninterface ContactData {\r\n  name: string;\r\n  contacts: ContactRegionDataType[];\r\n}\r\n\r\nconst ContactPage: React.FC = () => {\r\n  // const [isCheck, setisCheck] = useState(0);\r\n  useReCaptcha3(RECAPTCHA_SITEKEY);\r\n  useLocalizePage(\"contact\", \"/api/page/en/contact\");\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  // const contactRegions = useLocalize<ContactData[]>(\"contactRegions\");\r\n\r\n  // const renderContact = (country: string, city: string, address: string) => {\r\n  //   return (\r\n  //     <li className=\"contact\" key={city}>\r\n  //       <h2 className=\"city\">\r\n  //         {city},<span>{country}</span>\r\n  //       </h2>\r\n  //       <div className=\"address\">\r\n  //         <Map /> {address}\r\n  //       </div>\r\n  //       <div\r\n  //         className=\"btn-email\"\r\n  //         onClick={() => {\r\n  //           window.scrollTo({\r\n  //             top: 0,\r\n  //             behavior: \"smooth\",\r\n  //           });\r\n  //         }}\r\n  //       >\r\n  //         <Add /> Send an email\r\n  //       </div>\r\n  //     </li>\r\n  //   );\r\n  // };\r\n\r\n  // const onSelectLabel = (id: any, newIndex: number) => {\r\n  //   newIndex === isCheck ? setisCheck(-1) : setisCheck(newIndex);\r\n  //   setTimeout(() => {\r\n  //     window.scrollTo({\r\n  //       top: document.getElementById(id)?.offsetTop! - 150,\r\n  //       behavior: \"smooth\",\r\n  //     });\r\n  //   }, 400);\r\n  //   return;\r\n  // };\r\n\r\n  return (\r\n    <section className=\"com-contact\">\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Reach Out To Our Team | Gameloft</title>\r\n        <meta name=\"description\" content=\"Reach out to our dedicated team. We're more than happy to assist and answer your questions or concerns.\" />\r\n        <link rel=\"canonical\" href=\"https://www.gameloft.com/forbrands/contact-us\" />\r\n      </Helmet>\r\n      <Introduce scrollable=\"true\" />\r\n      <FormContact />\r\n      {/* <div className=\"tabs\">\r\n        {contactRegions?.map((item: ContactData, index) => {\r\n          return (\r\n            <ul id={`tab-${index}`} className=\"tab\" key={index}>\r\n              <input type=\"radio\" id={`rd${index + 1}`} name=\"rd\" checked={isCheck === index} onChange={() => {}} />\r\n              <label\r\n                className=\"tab-label\"\r\n                htmlFor={`rd${index + 1}`}\r\n                onClick={() => {\r\n                  onSelectLabel(`tab-${index}`, index);\r\n                }}\r\n              >\r\n                <span>{item.name}</span>\r\n                <RemoveIcon className=\"remove\" />\r\n                <AddIcon className=\"add\" />\r\n              </label>\r\n              <div className=\"tab-content\">\r\n                <div className=\"list-contact\">{item.contacts.map((contact: ContactRegionDataType) => renderContact(contact.nation, contact.city, contact.address))}</div>\r\n              </div>\r\n            </ul>\r\n          );\r\n        })}\r\n      </div> */}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n"],"sourceRoot":""}