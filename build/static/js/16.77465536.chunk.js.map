{"version":3,"sources":["components/base/value/Value.tsx"],"names":["Value","props","useWindowSize","width","data","useLocalize","useState","render","setRender","settings","dots","customPaging","href","className","infinite","speed","slidesToShow","isMobile","figures","length","slidesToScroll","slideScroll","centerMode","undefined","centerPadding","arrows","trackScrolling","wrappedElement","document","getElementById","isBottom","removeEventListener","el","getBoundingClientRect","bottom","window","innerHeight","useEffect","addEventListener","map","slide","index","value","str","number","match","filter","x","indexNumber","indexOf","key","src","image","url","alt","test","slice","end","parseFloat","duration","separator","decimal","decimals","Math","floor","toString","split","quote","generate","button","to","discover","text"],"mappings":"kQAkJeA,UA9GqB,SAACC,GAAW,IAAD,EAC7BC,cAATC,EADsC,oBAEvCC,EAAOC,YAA2B,UAFK,EAQjBC,oBAAS,GARQ,mBAQtCC,EARsC,KAQ9BC,EAR8B,KAgBvCC,EAAW,CACfC,MAAM,EACNC,aAAc,WACZ,OACE,uBAAGC,KAAK,YACN,yBAAKC,UAAU,qBAIrBC,UAAU,EACVC,MAAO,IACPC,aAAcf,EAAMgB,UArBbd,EAAQ,IAqBgB,EAjB3BC,EACKA,EAAKc,QAAQC,OAAS,EAAI,EAAI,EAEhC,EAePC,eAAgBnB,EAAMoB,aAAe,EACrCC,gBAAkCC,IAAtBtB,EAAMoB,cAA6B,EAC/CG,cAAe,MACfC,QAAQ,GAGJC,EAAiB,SAAjBA,IACJ,IAAMC,EAAiBC,SAASC,eAAe,cAAgBD,SAASC,eAAe,mBAChE,OAAnBF,GAA2BG,EAASH,KACtCnB,GAAU,GACVoB,SAASG,oBAAoB,SAAUL,KAIrCI,EAAW,SAACE,GAChB,OAAOA,EAAGC,wBAAwBC,QAAUC,OAAOC,YAAc,MA4CnE,OAPAC,qBAAU,WAER,OADAT,SAASU,iBAAiB,SAAUZ,GAC7B,WACLE,SAASG,oBAAoB,SAAUL,MAExC,IAGD,6BAASb,UAAU,aAChBN,GACC,kBAAC,IAAD,eAAQM,UAAU,cAAiBJ,GAvCxB,WACf,GAAIL,EACF,OAAOA,EAAKc,QAAQqB,KAAI,SAACC,EAAOC,GAAW,IAAD,EAPvBC,EAQbC,EAAMH,EAAME,MAEZE,GAAS,UAAAD,EAAIE,MADF,sBACF,eAAqBC,QAAO,SAACC,GAAD,MAAa,KAANA,KAAU,KAAM,GAC5DC,EAAcL,EAAIM,QAAQL,GAE9B,OACE,yBAAK/B,UAAU,OAAOqC,IAAKT,GACzB,yBAAK5B,UAAU,eACb,kBAAC,IAAD,CAAWsC,IAAKX,EAAMY,MAAMC,IAAKC,IAAI,iBAEtC,cAAcC,KAAKZ,GAClB,yBAAK9B,UAAU,mBACZ8B,EAAIa,MAAM,EAAGR,GACd,kBAAC,IAAD,CAASS,IAAKC,WAAWd,GAASe,SAAU,EAAGC,UAAU,GAAGC,QAAQ,IAAIC,UArB/DpB,EAqBuFgB,WAAWd,GApBnHF,GAASqB,KAAKC,MAAMtB,KAAWA,GAAcA,EAAMuB,WAAWC,MAAM,KAAK,GAAG/C,QACzE,KAoBMwB,EAAIa,MAAMR,EAAcJ,EAAOzB,SAGhC,yBAAKN,UAAU,uBAAuB2B,EAAME,OAEhD,yBAAK7B,UAAU,WAAW2B,EAAM2B,WAkBjCC,KAKA,OAAJhE,QAAI,IAAJA,OAAA,EAAAA,EAAMiE,SACL,yBAAKxD,UAAU,oBACb,kBAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAG,UAC7B,oCAAMlE,QAAN,IAAMA,OAAN,EAAMA,EAAMiE,OAAOE,SAASC,OAE9B,kBAAC,IAAD,CAAM3D,UAAU,iBAAiByD,GAAG,UAClC,oCAAMlE,QAAN,IAAMA,OAAN,EAAMA,EAAMiE,OAAOE,SAASC,W","file":"static/js/16.77465536.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport CountUp from \"react-countup\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport useWindowSize from \"utils/resizeViewport\";\r\nimport \"./Value.scss\";\r\nimport { useLocalize } from \"store/actions/localizeAction\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LabelDataType } from \"../strength/Strength\";\r\nimport LazyImage from \"libs/lazy-load/LazyImage\";\r\nexport interface ValueProps {\r\n  isMobile?: boolean;\r\n  slideScroll?: number;\r\n  keyData?: string;\r\n  mode?: string;\r\n}\r\nexport interface ValueDataType {\r\n  button: {\r\n    discover: {\r\n      text: string;\r\n      href: string;\r\n    };\r\n  };\r\n  label: LabelDataType;\r\n  figures: [\r\n    {\r\n      image: {\r\n        url: string;\r\n      };\r\n      quote: string;\r\n      value: string;\r\n    }\r\n  ];\r\n}\r\nconst Value: React.FC<ValueProps> = (props) => {\r\n  const [width] = useWindowSize();\r\n  const data = useLocalize<ValueDataType>(\"values\");\r\n\r\n  //True - mobile\r\n  const checkSizeDevice = () => {\r\n    return width < 769;\r\n  };\r\n  const [render, setRender] = useState(false);\r\n  const checkLength = () => {\r\n    if (data) {\r\n      return data.figures.length > 2 ? 3 : 2;\r\n    }\r\n    return 1;\r\n  };\r\n\r\n  const settings = {\r\n    dots: true,\r\n    customPaging: () => {\r\n      return (\r\n        <a href=\"#section\">\r\n          <div className=\"com-value-dots\"></div>\r\n        </a>\r\n      );\r\n    },\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: props.isMobile ? 1 : checkSizeDevice() ? 1 : checkLength(),\r\n    slidesToScroll: props.slideScroll || 1,\r\n    centerMode: props.slideScroll === undefined && true,\r\n    centerPadding: \"0px\",\r\n    arrows: false,\r\n  };\r\n\r\n  const trackScrolling = () => {\r\n    const wrappedElement = document.getElementById(\"introduce\") || document.getElementById(\"bestcase-detail\");\r\n    if (wrappedElement !== null && isBottom(wrappedElement)) {\r\n      setRender(true);\r\n      document.removeEventListener(\"scroll\", trackScrolling);\r\n    }\r\n  };\r\n\r\n  const isBottom = (el: HTMLElement) => {\r\n    return el.getBoundingClientRect().bottom <= window.innerHeight / 1.25;\r\n  };\r\n\r\n  const countDecimals = (value: any) => {\r\n    if (value && Math.floor(value) !== value) return value.toString().split(\".\")[1].length || 0;\r\n    return 0;\r\n  };\r\n\r\n  const generate = () => {\r\n    if (data) {\r\n      return data.figures.map((slide, index) => {\r\n        let str = slide.value;\r\n        let myRegexp = /\\d*\\.?\\d*/gm;\r\n        let number = str.match(myRegexp)?.filter((x) => x !== \"\")[0] || \"\";\r\n        let indexNumber = str.indexOf(number!);\r\n\r\n        return (\r\n          <div className=\"item\" key={index}>\r\n            <div className=\"wrapper-img\">\r\n              <LazyImage src={slide.image.url} alt=\"icon-slider\"></LazyImage>\r\n            </div>\r\n            {/\\d*\\.?\\d*/gm.test(str) ? (\r\n              <div className=\"titleBig  title\">\r\n                {str.slice(0, indexNumber)}\r\n                <CountUp end={parseFloat(number)} duration={3} separator=\"\" decimal=\".\" decimals={countDecimals(parseFloat(number))}></CountUp>\r\n                {str.slice(indexNumber + number.length)}\r\n              </div>\r\n            ) : (\r\n                <div className=\"titleBig spec title\">{slide.value}</div>\r\n              )}\r\n            <div className=\"content\">{slide.quote}</div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"scroll\", trackScrolling);\r\n    return () => {\r\n      document.removeEventListener(\"scroll\", trackScrolling);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"com-value\">\r\n      {render && (\r\n        <Slider className=\"block-item\" {...settings}>\r\n          {generate()}\r\n        </Slider>\r\n      )}\r\n\r\n      {/* Button who we are page */}\r\n      {data?.button && (\r\n        <div className=\"wrapper-btnOffer\">\r\n          <Link className=\"btn-offer\" to=\"/offer\">\r\n            <div>{data?.button.discover.text}</div>\r\n          </Link>\r\n          <Link className=\"btn-offer-desk\" to=\"/offer\">\r\n            <div>{data?.button.discover.text}</div>\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Value;\r\n"],"sourceRoot":""}